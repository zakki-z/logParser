{% extends 'base.html.twig' %}

{% block title %}Log Dashboard - Log Parser{% endblock %}

{% block stylesheets %}
    <style type="text/tailwindcss">
        :root {
            --primary-color: #3b82f6;
        }
        .severity-info { background-color: #e0f2fe; color: #0ea5e9; }
        .severity-warning { background-color: #fffbeb; color: #f59e0b; }
        .severity-error { background-color: #ffe4e6; color: #ef4444; }
        .severity-debug { background-color: #f8fafc; color: #64748b; }
    </style>
{% endblock %}

{% block body %}
    <div class="relative flex size-full min-h-screen flex-col bg-gray-50" style='font-family: "Spline Sans", "Noto Sans", sans-serif;'>
        <!-- Header -->
        <header class="flex items-center justify-between whitespace-nowrap border-b border-solid border-gray-200 px-10 py-3 bg-white">
            <div class="flex items-center gap-8">
                <div class="flex items-center gap-3 text-gray-800">
                    <svg class="h-8 w-8 text-[var(--primary-color)]" fill="none" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg">
                        <path d="M39.5563 34.1455V13.8546C39.5563 15.708 36.8773 17.3437 32.7927 18.3189C30.2914 18.916 27.263 19.2655 24 19.2655C20.737 19.2655 17.7086 18.916 15.2073 18.3189C11.1227 17.3437 8.44365 15.708 8.44365 13.8546V34.1455C8.44365 35.9988 11.1227 37.6346 15.2073 38.6098C17.7086 39.2069 20.737 39.5564 24 39.5564C27.263 39.5564 30.2914 39.2069 32.7927 38.6098C36.8773 37.6346 39.5563 35.9988 39.5563 34.1455Z" fill="currentColor"></path>
                        <path clip-rule="evenodd" d="M10.4485 13.8519C10.4749 13.9271 10.6203 14.246 11.379 14.7361C12.298 15.3298 13.7492 15.9145 15.6717 16.3735C18.0007 16.9296 20.8712 17.2655 24 17.2655C27.1288 17.2655 29.9993 16.9296 32.3283 16.3735C34.2508 15.9145 35.702 15.3298 36.621 14.7361C37.3796 14.246 37.5251 13.9271 37.5515 13.8519C37.5287 13.7876 37.4333 13.5973 37.0635 13.2931C36.5266 12.8516 35.6288 12.3647 34.343 11.9175C31.79 11.0295 28.1333 10.4437 24 10.4437C19.8667 10.4437 16.2099 11.0295 13.657 11.9175C12.3712 12.3647 11.4734 12.8516 10.9365 13.2931C10.5667 13.5973 10.4713 13.7876 10.4485 13.8519ZM37.5563 18.7877C36.3176 19.3925 34.8502 19.8839 33.2571 20.2642C30.5836 20.9025 27.3973 21.2655 24 21.2655C20.6027 21.2655 17.4164 20.9025 14.7429 20.2642C13.1498 19.8839 11.6824 19.3925 10.4436 18.7877V34.1275C10.4515 34.1545 10.5427 34.4867 11.379 35.027C12.298 35.6207 13.7492 36.2054 15.6717 36.6644C18.0007 37.2205 20.8712 37.5564 24 37.5564C27.1288 37.5564 29.9993 37.2205 32.3283 36.6644C34.2508 36.2054 35.702 35.6207 36.621 35.027C37.4573 34.4867 37.5485 34.1546 37.5563 34.1275V18.7877ZM41.5563 13.8546V34.1455C41.5563 36.1078 40.158 37.5042 38.7915 38.3869C37.3498 39.3182 35.4192 40.0389 33.2571 40.5551C30.5836 41.1934 27.3973 41.5564 24 41.5564C20.6027 41.5564 17.4164 41.1934 14.7429 40.5551C12.5808 40.0389 10.6502 39.3182 9.20848 38.3869C7.84205 37.5042 6.44365 36.1078 6.44365 34.1455L6.44365 13.8546C6.44365 12.2684 7.37223 11.0454 8.39581 10.2036C9.43325 9.3505 10.8137 8.67141 12.343 8.13948C15.4203 7.06909 19.5418 6.44366 24 6.44366C28.4582 6.44366 32.5797 7.06909 35.657 8.13948C37.1863 8.67141 38.5667 9.3505 39.6042 10.2036C40.6278 11.0454 41.5563 12.2684 41.5563 13.8546Z" fill="currentColor" fill-rule="evenodd"></path>
                    </svg>
                    <h2 class="text-gray-800 text-xl font-bold">Log Analyzer</h2>
                </div>

                <nav class="flex items-center gap-6">
                    <a class="text-gray-900 text-sm font-semibold border-b-2 border-[var(--primary-color)] pb-1" href="#">Logs</a>
                </nav>
            </div>

            <div class="flex items-center gap-4">
                <div class="relative">
                    <span class="material-symbols-outlined absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">search</span>
                    <input class="form-input w-full rounded-full border-gray-300 bg-white py-2 pl-10 pr-4 text-sm text-gray-800 placeholder:text-gray-400 focus:ring-2 focus:ring-[var(--primary-color)] focus:ring-offset-2 focus:ring-offset-gray-50" placeholder="Search..." type="search" id="globalSearch"/>
                </div>

                {% if app.user %}
                    <div class="bg-center bg-no-repeat aspect-square bg-cover rounded-full size-10 bg-gray-300 flex items-center justify-center">
                        <span class="material-symbols-outlined text-gray-600">person</span>
                    </div>
                    <form action="{{ path('app_logout') }}" method="post" style="display: inline;">
                        <button type="submit" class="text-gray-500 hover:text-gray-900 text-sm font-medium transition-colors">Logout</button>
                    </form>
                {% endif %}
            </div>
        </header>

        <!-- Flash Messages -->
        {% for type, messages in app.flashes %}
            {% for message in messages %}
                <div class="mx-8 mt-4 rounded-md p-4 {% if type == 'error' %}bg-red-50 text-red-800{% elseif type == 'warning' %}bg-yellow-50 text-yellow-800{% else %}bg-green-50 text-green-800{% endif %}">
                    <div class="flex">
                        <div class="flex-shrink-0">
                        <span class="material-symbols-outlined {% if type == 'error' %}text-red-400{% elseif type == 'warning' %}text-yellow-400{% else %}text-green-400{% endif %}">
                            {% if type == 'error' %}error{% elseif type == 'warning' %}warning{% else %}check_circle{% endif %}
                        </span>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm font-medium">{{ message }}</p>
                        </div>
                    </div>
                </div>
            {% endfor %}
        {% endfor %}

        <!-- Main Content -->
        <main class="flex-1 px-4 sm:px-6 lg:px-8 py-8">
            <div class="max-w-7xl mx-auto">
                <div class="mb-8">
                    <h1 class="text-gray-900 text-3xl font-bold tracking-tight">Parsed Logs</h1>
                    <p class="text-gray-500 mt-1 text-sm">View and analyze parsed log data. Use filters to narrow down results.</p>

                    <div class="mt-4 flex gap-4">
                        <a href="#" onclick="document.getElementById('uploadModal').classList.remove('hidden')" class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-[var(--primary-color)] hover:bg-blue-700">
                            <span class="material-symbols-outlined mr-2">upload</span>
                            Upload New File
                        </a>
                    </div>
                </div>

                <!-- Upload Modal -->
                <div id="uploadModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50">
                    <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-lg font-medium text-gray-900">Upload Log File</h3>
                            <button onclick="document.getElementById('uploadModal').classList.add('hidden')" class="text-gray-400 hover:text-gray-600">
                                <span class="material-symbols-outlined">close</span>
                            </button>
                        </div>
                        <form action="{{ path('log_upload') }}" method="post" enctype="multipart/form-data">
                            <div class="mb-4">
                                <input type="file" name="logfile" accept=".log,.txt" required class="form-input w-full">
                            </div>
                            <div class="flex justify-end gap-3">
                                <button type="button" onclick="document.getElementById('uploadModal').classList.add('hidden')" class="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md">
                                    Cancel
                                </button>
                                <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-[var(--primary-color)] hover:bg-blue-700 rounded-md">
                                    Upload & Parse
                                </button>
                            </div>
                        </form>
                    </div>
                </div>

                {% if uploadedFiles|length > 0 %}
                    <!-- File Management Section -->
                    <div class="mb-8 bg-white rounded-lg border border-gray-200 p-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Uploaded Files</h3>
                        <div class="space-y-3">
                            {% for fileHistory in uploadedFiles %}
                                <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                                    <div class="flex items-center space-x-4">
                                        <div class="flex-shrink-0">
                                            <span class="material-symbols-outlined text-gray-400">description</span>
                                        </div>
                                        <div>
                                            <p class="text-sm font-medium text-gray-900">{{ fileHistory.filename }}</p>
                                            <p class="text-sm text-gray-500">
                                                {{ fileHistory.uploaded_at|date('M j, Y g:i A') }} •
                                                {{ fileHistory.entry_count }} entries •
                                                {{ (fileHistory.file_size / 1024)|number_format(1) }} KB
                                            </p>
                                        </div>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                    </div>
                                </div>
                            {% endfor %}
                        </div>
                    </div>
                {% endif %}
                <!-- Filters and Search -->
                {% if logs|length > 0 %}
                    <div class="flex flex-col gap-6">
                        <div class="flex items-center gap-4 flex-wrap bg-white p-4 rounded-lg border border-gray-200">
                            <div class="relative flex-1">
                                <span class="material-symbols-outlined absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">search</span>
                                <input class="form-input w-full rounded-md border-gray-300 bg-white py-2.5 pl-10 pr-4 text-sm text-gray-800 placeholder:text-gray-400 focus:ring-2 focus:ring-[var(--primary-color)] focus:ring-offset-2 focus:ring-offset-gray-50" placeholder="Search logs by keyword, source, etc." type="search" id="logSearch"/>
                            </div>

                            <div class="flex items-center gap-2 flex-wrap">
                                <select id="channelFilter" class="form-select rounded-md border-gray-300 text-sm">
                                    <option value="">All Channels</option>
                                </select>

                                <select id="severityFilter" class="form-select rounded-md border-gray-300 text-sm">
                                    <option value="">All Severities</option>
                                    <option value="INFO">INFO</option>
                                    <option value="WARNING">WARNING</option>
                                    <option value="ERROR">ERROR</option>
                                    <option value="DEBUG">DEBUG</option>
                                </select>

                                <select id="fileFilter" class="form-select rounded-md border-gray-300 text-sm">
                                    <option value="">All Sources</option>
                                </select>

                                <input type="date" id="dateFromFilter" class="form-input rounded-md border-gray-300 text-sm">
                                <span class="text-gray-500">to</span>
                                <input type="date" id="dateToFilter" class="form-input rounded-md border-gray-300 text-sm">

                                <button id="clearFilters" class="px-3 py-2 text-sm font-medium text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-md">
                                    Clear
                                </button>
                            </div>
                        </div>
                        <!-- Results Stats -->
                        <div class="flex justify-between items-center">
                            <p class="text-sm text-gray-500">
                                Showing <span id="visibleCount">{{ logs|length }}</span> of <span id="totalCount">{{ logs|length }}</span> log entries
                            </p>
                                <form action="{{ path('log_clear') }}" method="post" style="display: inline;">
                                    <button type="submit" onclick="return confirm('Clear ALL logs and files? This will allow re-uploading the same files.')" class="px-3 py-2 text-sm font-medium text-red-700 bg-red-100 hover:bg-red-200 rounded-md">
                                        Clear Everything
                                    </button>
                                </form>
                            </div>
                        </div>

                        <!-- Log Table -->
                        <div class="overflow-hidden rounded-lg border border-gray-200 bg-white">
                            <table class="min-w-full divide-y divide-gray-200" id="logTable">
                                <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onclick="sortTable('date')">
                                        <div class="flex items-center gap-1">Timestamp <span class="material-symbols-outlined text-base">unfold_more</span></div>
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onclick="sortTable('type')">
                                        <div class="flex items-center gap-1">Severity <span class="material-symbols-outlined text-base">unfold_more</span></div>
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Message</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100" onclick="sortTable('channel')">
                                        <div class="flex items-center gap-1">Channel <span class="material-symbols-outlined text-base">unfold_more</span></div>
                                    </th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Source</th>
                                </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200" id="logTableBody">
                                {% for log in logs %}
                                    <tr class="hover:bg-gray-50 transition-colors"
                                        data-date="{{ log.date|date('Y-m-d H:i:s') }}"
                                        data-type="{{ log.type }}"
                                        data-channel="{{ log.channel }}"
                                        data-filename="{{ log.file.fileName }}"
                                        data-information="{{ log.information|lower }}">
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {{ log.date|date('Y-m-d H:i:s') }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="px-2 py-1 text-xs font-semibold rounded-md severity-{{ log.type|lower }}">
                                                {{ log.type }}
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 text-sm text-gray-900 max-w-md">
                                            <div class="truncate" title="{{ log.information }}">
                                                {{ log.information }}
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            {{ log.channel }}
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <div>
                                                <div class="font-medium">{{ log.file.fileName }}</div>
                                                <div class="text-xs text-gray-400">{{ log.file.uploadedAt|date('M j, g:i A') }}</div>
                                            </div>
                                        </td>
                                    </tr>
                                {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                {% else %}
                    <!-- Empty State-->
                    <div class="text-center py-12">
                        <div class="mx-auto h-12 w-12 text-gray-400">
                            <span class="material-symbols-outlined text-5xl">description</span>
                        </div>
                        <h3 class="mt-2 text-sm font-medium text-gray-900">No logs found</h3>
                        <p class="mt-1 text-sm text-gray-500">Get started by uploading your first log file.</p>
                        <div class="mt-6">
                            <button onclick="document.getElementById('uploadModal').classList.remove('hidden')" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-[var(--primary-color)] hover:bg-blue-700">
                                <span class="material-symbols-outlined mr-2">upload</span>
                                Upload Log File
                            </button>
                        </div>
                    </div>
                {% endif %}
            </div>
        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const logSearch = document.getElementById('logSearch');
            const globalSearch = document.getElementById('globalSearch');
            const channelFilter = document.getElementById('channelFilter');
            const severityFilter = document.getElementById('severityFilter');
            const fileFilter = document.getElementById('fileFilter');
            const dateFromFilter = document.getElementById('dateFromFilter');
            const dateToFilter = document.getElementById('dateToFilter');
            const clearFiltersBtn = document.getElementById('clearFilters');
            const logRows = document.querySelectorAll('#logTableBody tr');
            const visibleCount = document.getElementById('visibleCount');
            const totalCount = document.getElementById('totalCount');

            // Check if elements exist before proceeding
            if (!logRows.length) return;

            // Populate filter options
            function populateFilters() {
                const channels = new Set();
                const files = new Set();

                logRows.forEach(row => {
                    const channel = row.dataset.channel;
                    const filename = row.dataset.filename;

                    if (channel && channel.trim()) {
                        channels.add(channel.trim());
                    }
                    if (filename && filename.trim()) {
                        files.add(filename.trim());
                    }
                });

                // Clear existing options (except first one)
                while (channelFilter.children.length > 1) {
                    channelFilter.removeChild(channelFilter.lastChild);
                }
                while (fileFilter.children.length > 1) {
                    fileFilter.removeChild(fileFilter.lastChild);
                }

                // Add channel options
                Array.from(channels).sort().forEach(channel => {
                    const option = document.createElement('option');
                    option.value = channel;
                    option.textContent = channel;
                    channelFilter.appendChild(option);
                });

                // Add file options
                Array.from(files).sort().forEach(filename => {
                    const option = document.createElement('option');
                    option.value = filename;
                    option.textContent = filename;
                    fileFilter.appendChild(option);
                });
            }

            // Enhanced filter function
            function filterLogs() {
                let visible = 0;
                const searchTerm = (logSearch?.value || globalSearch?.value || '').toLowerCase().trim();
                const selectedChannel = channelFilter?.value || '';
                const selectedSeverity = severityFilter?.value || '';
                const selectedFile = fileFilter?.value || '';
                const dateFrom = dateFromFilter?.value || '';
                const dateTo = dateToFilter?.value || '';

                logRows.forEach(row => {
                    let show = true;

                    // Search filter - check information content
                    if (searchTerm) {
                        const information = row.dataset.information || '';
                        const channel = row.dataset.channel || '';
                        const type = row.dataset.type || '';
                        const filename = row.dataset.filename || '';

                        const searchableText = (information + ' ' + channel + ' ' + type + ' ' + filename).toLowerCase();
                        if (!searchableText.includes(searchTerm)) {
                            show = false;
                        }
                    }

                    // Channel filter
                    if (selectedChannel && row.dataset.channel !== selectedChannel) {
                        show = false;
                    }

                    // Severity filter
                    if (selectedSeverity && row.dataset.type !== selectedSeverity) {
                        show = false;
                    }

                    // File filter
                    if (selectedFile && row.dataset.filename !== selectedFile) {
                        show = false;
                    }

                    // Date filters
                    if (dateFrom) {
                        try {
                            const rowDate = new Date(row.dataset.date);
                            const filterDate = new Date(dateFrom);
                            filterDate.setHours(0, 0, 0, 0);

                            if (rowDate < filterDate) {
                                show = false;
                            }
                        } catch (e) {
                            console.warn('Date parsing error for dateFrom:', e);
                        }
                    }

                    if (dateTo) {
                        try {
                            const rowDate = new Date(row.dataset.date);
                            const filterDate = new Date(dateTo);
                            filterDate.setHours(23, 59, 59, 999);

                            if (rowDate > filterDate) {
                                show = false;
                            }
                        } catch (e) {
                            console.warn('Date parsing error for dateTo:', e);
                        }
                    }

                    // Show/hide row
                    if (show) {
                        row.style.display = '';
                        visible++;
                    } else {
                        row.style.display = 'none';
                    }
                });

                // Update count
                if (visibleCount) {
                    visibleCount.textContent = visible;
                }
            }

            // Debounce function for search input
            function debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }

            const debouncedFilter = debounce(filterLogs, 300);

            // Event listeners
            if (logSearch) {
                logSearch.addEventListener('input', debouncedFilter);
            }
            if (globalSearch) {
                globalSearch.addEventListener('input', debouncedFilter);
            }
            if (channelFilter) {
                channelFilter.addEventListener('change', filterLogs);
            }
            if (severityFilter) {
                severityFilter.addEventListener('change', filterLogs);
            }
            if (fileFilter) {
                fileFilter.addEventListener('change', filterLogs);
            }
            if (dateFromFilter) {
                dateFromFilter.addEventListener('change', filterLogs);
            }
            if (dateToFilter) {
                dateToFilter.addEventListener('change', filterLogs);
            }

            if (clearFiltersBtn) {
                clearFiltersBtn.addEventListener('click', function() {
                    if (logSearch) logSearch.value = '';
                    if (globalSearch) globalSearch.value = '';
                    if (channelFilter) channelFilter.value = '';
                    if (severityFilter) severityFilter.value = '';
                    if (fileFilter) fileFilter.value = '';
                    if (dateFromFilter) dateFromFilter.value = '';
                    if (dateToFilter) dateToFilter.value = '';
                    filterLogs();
                });
            }

            // Initialize
            populateFilters();

            // Set initial total count
            if (totalCount) {
                totalCount.textContent = logRows.length;
            }
        });

        // Sort functionality
        function sortTable(column) {
            const table = document.getElementById('logTable');
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            rows.sort((a, b) => {
                let aVal = a.dataset[column];
                let bVal = b.dataset[column];

                if (column === 'date') {
                    aVal = new Date(aVal);
                    bVal = new Date(bVal);
                }

                return aVal > bVal ? 1 : -1;
            });

            rows.forEach(row => tbody.appendChild(row));
        }
    </script>
{% endblock %}
